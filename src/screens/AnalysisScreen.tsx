import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  ActivityIndicator,
  Alert,
  Share,
} from 'react-native';
import Clipboard from '@react-native-clipboard/clipboard';
import { AIService } from '../services/AIService';
import { StorageService } from '../services/StorageService';
import { ConversationData, AnalysisResult, ResponseSuggestion } from '../types';

interface AnalysisScreenProps {
  route: {
    params: {
      conversationData: ConversationData;
      imageMetadata?: any;
    };
  };
  navigation: any;
}

export const AnalysisScreen: React.FC<AnalysisScreenProps> = ({ route, navigation }) => {
  const { conversationData, imageMetadata } = route.params;
  const [analysisResult, setAnalysisResult] = useState<AnalysisResult | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [selectedTab, setSelectedTab] = useState<'overview' | 'suggestions' | 'insights'>('overview');

  useEffect(() => {
    performAnalysis();
    saveConversation();
  }, []);

  const performAnalysis = async () => {
    setIsLoading(true);
    try {
      // Check for cached analysis first
      const cachedResult = await StorageService.getCachedAnalysisResult(conversationData.id);
      if (cachedResult) {
        setAnalysisResult(cachedResult);
        setIsLoading(false);
        return;
      }

      // Get settings for API key
      const settings = await StorageService.getSettings();
      if (!settings.apiKey) {
        Alert.alert('API Key Required', 'Please configure your OpenAI API key in settings.');
        navigation.goBack();
        return;
      }

      // Initialize AI service
      AIService.initialize(settings.apiKey);

      // Perform AI analysis
      const aiResponse = await AIService.analyzeConversation(
        conversationData,
        settings.analysisType
      );

      const result: AnalysisResult = {
        conversationData,
        suggestions: aiResponse.suggestions,
        insights: aiResponse.insights,
      };

      setAnalysisResult(result);

      // Cache the result
      await StorageService.cacheAnalysisResult(conversationData.id, result);

    } catch (error) {
      console.error('Analysis failed:', error);
      Alert.alert(
        'Analysis Failed',
        'Unable to analyze the conversation. Please check your internet connection and API key.',
        [
          { text: 'Retry', onPress: performAnalysis },
          { text: 'Go Back', onPress: () => navigation.goBack() },
        ]
      );
    } finally {
      setIsLoading(false);
    }
  };

  const saveConversation = async () => {
    try {
      const settings = await StorageService.getSettings();
      if (settings.autoSaveConversations) {
        await StorageService.saveConversation(conversationData);
      }
    } catch (error) {
      console.error('Failed to save conversation:', error);
    }
  };

  const copyToClipboard = (text: string) => {
    Clipboard.setString(text);
    Alert.alert('Copied', 'Text copied to clipboard');
  };

  const shareAnalysis = async () => {
    if (!analysisResult) return;

    const shareText = `Communication Analysis Summary:

Overall Tone: ${conversationData.conversationTone.overallTone}
Emotional Intensity: ${conversationData.conversationTone.emotionalIntensity}/10

Key Insights:
${analysisResult.insights.map(insight => `‚Ä¢ ${insight.title}: ${insight.description}`).join('\n')}

Top Suggestions:
${analysisResult.suggestions.slice(0, 3).map((s, i) => `${i + 1}. ${s.content}`).join('\n')}

Generated by Communication Assistant`;

    try {
      await Share.share({ message: shareText });
    } catch (error) {
      console.error('Share failed:', error);
    }
  };

  const renderSuggestionCard = (suggestion: ResponseSuggestion, index: number) => (
    <TouchableOpacity
      key={suggestion.id}
      style={styles.suggestionCard}
      onPress={() => copyToClipboard(suggestion.content)}
    >
      <View style={styles.suggestionHeader}>
        <Text style={styles.suggestionType}>{suggestion.type.toUpperCase()}</Text>
        <Text style={[styles.suggestionTone, { color: getToneColor(suggestion.tone) }]}>
          {suggestion.tone}
        </Text>
      </View>
      <Text style={styles.suggestionContent}>{suggestion.content}</Text>
      <Text style={styles.suggestionRationale}>{suggestion.rationale}</Text>
      <Text style={styles.copyHint}>Tap to copy</Text>
    </TouchableOpacity>
  );

  const getToneColor = (tone: string) => {
    switch (tone) {
      case 'supportive': return '#28a745';
      case 'assertive': return '#ffc107';
      default: return '#6c757d';
    }
  };

  const getImportanceColor = (importance: string) => {
    switch (importance) {
      case 'high': return '#dc3545';
      case 'medium': return '#ffc107';
      default: return '#28a745';
    }
  };

  if (isLoading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#007AFF" />
        <Text style={styles.loadingText}>Analyzing conversation...</Text>
        <Text style={styles.loadingSubtext}>This may take a few moments</Text>
      </View>
    );
  }

  if (!analysisResult) {
    return (
      <View style={styles.errorContainer}>
        <Text style={styles.errorText}>Failed to analyze conversation</Text>
        <TouchableOpacity style={styles.retryButton} onPress={performAnalysis}>
          <Text style={styles.retryButtonText}>Retry Analysis</Text>
        </TouchableOpacity>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      {/* Header with conversation overview */}
      <View style={styles.header}>
        <Text style={styles.title}>Conversation Analysis</Text>
        <TouchableOpacity style={styles.shareButton} onPress={shareAnalysis}>
          <Text style={styles.shareButtonText}>üì§ Share</Text>
        </TouchableOpacity>
      </View>

      {/* Tab Navigation */}
      <View style={styles.tabContainer}>
        <TouchableOpacity
          style={[styles.tab, selectedTab === 'overview' && styles.activeTab]}
          onPress={() => setSelectedTab('overview')}
        >
          <Text style={[styles.tabText, selectedTab === 'overview' && styles.activeTabText]}>
            Overview
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[styles.tab, selectedTab === 'suggestions' && styles.activeTab]}
          onPress={() => setSelectedTab('suggestions')}
        >
          <Text style={[styles.tabText, selectedTab === 'suggestions' && styles.activeTabText]}>
            Suggestions ({analysisResult.suggestions.length})
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[styles.tab, selectedTab === 'insights' && styles.activeTab]}
          onPress={() => setSelectedTab('insights')}
        >
          <Text style={[styles.tabText, selectedTab === 'insights' && styles.activeTabText]}>
            Insights ({analysisResult.insights.length})
          </Text>
        </TouchableOpacity>
      </View>

      <ScrollView style={styles.content}>
        {selectedTab === 'overview' && (
          <View>
            {/* Tone Analysis */}
            <View style={styles.card}>
              <Text style={styles.cardTitle}>üìä Communication Analysis</Text>
              <View style={styles.metricRow}>
                <Text style={styles.metricLabel}>Overall Tone:</Text>
                <Text style={[styles.metricValue, { textTransform: 'capitalize' }]}>
                  {conversationData.conversationTone.overallTone}
                </Text>
              </View>
              <View style={styles.metricRow}>
                <Text style={styles.metricLabel}>Emotional Intensity:</Text>
                <Text style={styles.metricValue}>
                  {conversationData.conversationTone.emotionalIntensity}/10
                </Text>
              </View>
              <View style={styles.metricRow}>
                <Text style={styles.metricLabel}>Participants:</Text>
                <Text style={styles.metricValue}>
                  {conversationData.participants.join(', ') || 'Unknown'}
                </Text>
              </View>
            </View>

            {/* Key Topics */}
            {conversationData.conversationTone.keyTopics.length > 0 && (
              <View style={styles.card}>
                <Text style={styles.cardTitle}>üè∑Ô∏è Key Topics</Text>
                <View style={styles.topicsContainer}>
                  {conversationData.conversationTone.keyTopics.map((topic, index) => (
                    <View key={index} style={styles.topicTag}>
                      <Text style={styles.topicText}>{topic}</Text>
                    </View>
                  ))}
                </View>
              </View>
            )}

            {/* Communication Patterns */}
            {conversationData.conversationTone.communicationPatterns.length > 0 && (
              <View style={styles.card}>
                <Text style={styles.cardTitle}>üîç Communication Patterns</Text>
                {conversationData.conversationTone.communicationPatterns.map((pattern, index) => (
                  <Text key={index} style={styles.patternText}>‚Ä¢ {pattern}</Text>
                ))}
              </View>
            )}

            {/* Original Text */}
            <View style={styles.card}>
              <Text style={styles.cardTitle}>üìù Extracted Text</Text>
              <ScrollView style={styles.textContainer} nestedScrollEnabled>
                <Text style={styles.extractedText}>{conversationData.extractedText}</Text>
              </ScrollView>
            </View>
          </View>
        )}

        {selectedTab === 'suggestions' && (
          <View>
            {analysisResult.suggestions.length > 0 ? (
              <>
                <Text style={styles.sectionDescription}>
                  Here are constructive response suggestions to improve communication:
                </Text>
                {analysisResult.suggestions.map(renderSuggestionCard)}
              </>
            ) : (
              <View style={styles.emptyState}>
                <Text style={styles.emptyStateText}>
                  No specific suggestions available for this conversation.
                </Text>
              </View>
            )}
          </View>
        )}

        {selectedTab === 'insights' && (
          <View>
            {analysisResult.insights.length > 0 ? (
              <>
                <Text style={styles.sectionDescription}>
                  Communication insights and opportunities for improvement:
                </Text>
                {analysisResult.insights.map((insight, index) => (
                  <View key={index} style={styles.insightCard}>
                    <View style={styles.insightHeader}>
                      <Text style={styles.insightTitle}>{insight.title}</Text>
                      <View style={[styles.importanceBadge, { backgroundColor: getImportanceColor(insight.importance) }]}>
                        <Text style={styles.importanceText}>{insight.importance}</Text>
                      </View>
                    </View>
                    <Text style={styles.insightDescription}>{insight.description}</Text>
                    <Text style={styles.insightCategory}>Category: {insight.category}</Text>
                  </View>
                ))}
              </>
            ) : (
              <View style={styles.emptyState}>
                <Text style={styles.emptyStateText}>
                  No specific insights available for this conversation.
                </Text>
              </View>
            )}
          </View>
        )}
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f8f9fa',
  },
  loadingText: {
    fontSize: 18,
    fontWeight: '600',
    marginTop: 16,
    color: '#333',
  },
  loadingSubtext: {
    fontSize: 14,
    color: '#666',
    marginTop: 4,
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f8f9fa',
    padding: 20,
  },
  errorText: {
    fontSize: 18,
    color: '#dc3545',
    textAlign: 'center',
    marginBottom: 20,
  },
  retryButton: {
    backgroundColor: '#007AFF',
    padding: 12,
    borderRadius: 8,
  },
  retryButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 20,
    backgroundColor: 'white',
    borderBottomWidth: 1,
    borderBottomColor: '#e1e5e9',
  },
  title: {
    fontSize: 20,
    fontWeight: '600',
    color: '#1a1a1a',
  },
  shareButton: {
    backgroundColor: '#f8f9fa',
    padding: 8,
    borderRadius: 6,
  },
  shareButtonText: {
    color: '#007AFF',
    fontSize: 14,
    fontWeight: '500',
  },
  tabContainer: {
    flexDirection: 'row',
    backgroundColor: 'white',
    borderBottomWidth: 1,
    borderBottomColor: '#e1e5e9',
  },
  tab: {
    flex: 1,
    padding: 16,
    alignItems: 'center',
  },
  activeTab: {
    borderBottomWidth: 2,
    borderBottomColor: '#007AFF',
  },
  tabText: {
    fontSize: 14,
    color: '#666',
    fontWeight: '500',
  },
  activeTabText: {
    color: '#007AFF',
  },
  content: {
    flex: 1,
    padding: 16,
  },
  sectionDescription: {
    fontSize: 14,
    color: '#666',
    marginBottom: 16,
    lineHeight: 20,
  },
  card: {
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    borderWidth: 1,
    borderColor: '#e1e5e9',
  },
  cardTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1a1a1a',
    marginBottom: 12,
  },
  metricRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  metricLabel: {
    fontSize: 14,
    color: '#666',
  },
  metricValue: {
    fontSize: 14,
    fontWeight: '500',
    color: '#1a1a1a',
  },
  topicsContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
  },
  topicTag: {
    backgroundColor: '#e3f2fd',
    borderRadius: 16,
    paddingHorizontal: 12,
    paddingVertical: 4,
    margin: 4,
  },
  topicText: {
    fontSize: 12,
    color: '#1976d2',
    fontWeight: '500',
  },
  patternText: {
    fontSize: 14,
    color: '#333',
    marginBottom: 4,
    lineHeight: 20,
  },
  textContainer: {
    maxHeight: 150,
    backgroundColor: '#f8f9fa',
    borderRadius: 8,
    padding: 12,
  },
  extractedText: {
    fontSize: 14,
    color: '#333',
    lineHeight: 20,
  },
  suggestionCard: {
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    borderWidth: 1,
    borderColor: '#e1e5e9',
  },
  suggestionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  suggestionType: {
    fontSize: 12,
    fontWeight: '600',
    color: '#007AFF',
  },
  suggestionTone: {
    fontSize: 12,
    fontWeight: '500',
    textTransform: 'capitalize',
  },
  suggestionContent: {
    fontSize: 16,
    color: '#1a1a1a',
    marginBottom: 8,
    lineHeight: 22,
  },
  suggestionRationale: {
    fontSize: 14,
    color: '#666',
    fontStyle: 'italic',
    marginBottom: 8,
    lineHeight: 20,
  },
  copyHint: {
    fontSize: 12,
    color: '#999',
    textAlign: 'right',
  },
  insightCard: {
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    borderWidth: 1,
    borderColor: '#e1e5e9',
  },
  insightHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  insightTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1a1a1a',
    flex: 1,
  },
  importanceBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
  },
  importanceText: {
    fontSize: 10,
    color: 'white',
    fontWeight: '600',
    textTransform: 'uppercase',
  },
  insightDescription: {
    fontSize: 14,
    color: '#333',
    marginBottom: 8,
    lineHeight: 20,
  },
  insightCategory: {
    fontSize: 12,
    color: '#666',
    textTransform: 'capitalize',
  },
  emptyState: {
    padding: 40,
    alignItems: 'center',
  },
  emptyStateText: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
  },
}); 